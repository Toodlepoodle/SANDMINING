GETWD()
getwd()
setwd("C:/Users/Sayan/Desktop/SANDMINING/")
library(sf)
library(ggplot2)
library(mapview)
shapefile_path <- "DAMODAR_SHAPEFILE/mrb_rivnets_Q09_10.shp"
basin_shapefile_path <- "DAMODAR_SHAPEFILE/mrb_basins.shp"
damodar_river <- st_read(shapefile_path)
damodar_basin <- st_read(basin_shapefile_path)
ggplot() +
geom_sf(data = damodar_basin, fill = "lightblue", color ="black", alpha = 0.5) +
geom_sf(data = damodar_river, color = "blue", size = 1) +
ggtitle("Damodar River and Basin") +
theme_minimal()
# Create interactive map with satellite imagery
mapview(damodar_river, map.types = "Esri.WorldImagery")
library(raster)
library(rgdal)
install.packages("rgdal")
devtools::install_github("cran/rgdal")
devtools::install_github("cran/rgdal")
devtools::install_github("thk686/rgdal2")
devtools::install_github("thk686/rgdal2")
library(rgdal)
devtools::install_github("cran
/
rgdal")
devtools::install_github("cran/rgdal")
library(sf)
library(sp)
library(ggplot2)
library(rgdal)
install.packages("rgdal")
remotes::install_version("rgdal", version = "x.x.x", repos = "http://cran.us.r-project.org")
install.packages("rgdal", type = "source")
install.packages("raster")
install.packages("raster")
library(terra)
# Create mock polygon (already created above)
polygon_coords <- matrix(c(
0, 0,   # Bottom-left
0, 1,   # Top-left
1, 1,   # Top-right
1, 0,   # Bottom-right
0, 0    # Closing the polygon
), ncol = 2, byrow = TRUE)
polygon <- st_sfc(st_polygon(list(polygon_coords)), crs = 4326)
polygon_df <- st_sf(geometry = polygon)
# Create a mock raster dataset
# Define the extent of the raster
ext <- ext(0, 1, 0, 1)  # Define the extent of the raster
r <- rast(ncol = 10, nrow = 10, crs = crs(polygon_df), ext = ext)
values(r) <- runif(ncell(r))  # Assign random values to the raster
# Stack multiple bands (for demonstration, use the same raster)
bands <- rast(list(B1 = r, B2 = r, B3 = r))  # Example with 3 bands
# Ensure CRS of bands and polygon match
crs(bands) <- crs(polygon_df)
# Crop and mask the raster data to the polygon extent
extracted_data <- crop(bands, ext(polygon_df))
masked_data <- mask(extracted_data, polygon_df)
# Extract data for the polygon
extracted_values <- extract(masked_data, polygon_df)
# Print the extracted values
print(extracted_values)
library(rgee)
# Authenticate with Google Earth Engine
ee_Initialize()
# Define your polygon coordinates (e.g., a point in New Delhi, India)
coords <- data.frame(
lon = 77.1025,
lat = 28.6139
)
# Convert to an sf object
point_sf <- st_as_sf(coords, coords = c("lon", "lat"), crs = 4326)
# Create a Google Earth Engine geometry from the sf object
point_geom <- ee$Geometry$Point(coords$lon, coords$lat)
# Define Landsat 8 collection and filter by date and location
landsat_collection <- ee$ImageCollection("LANDSAT/LC08/C01/T1_TOA") %>%
ee$ImageCollection$filterBounds(point_geom) %>%
ee$ImageCollection$sort("system:time_start") %>%
ee$ImageCollection$first()
reticulate::py_module_available("ee")
reticulate::py_install("earthengine-api", envname = "C:/Users/Sayan/Documents/.virtualenvs/r-reticulate")
reticulate::py_module_available("ee")
reticulate::py_config()
py_run_string("import ee")
reticulate::py_config()
reticulate::py_config()
use_python("C:/Users/Sayan/Documents/.virtualenvs/r-reticulate/Scripts/python.exe", required = TRUE)
use_virtualenv("C:/Users/Sayan/Documents/.virtualenvs/r-reticulate", required = TRUE)
py_module_available("ee")
ee <- import("ee")
library(reticulate)
ee <- import("ee")
use_virtualenv("C:/Users/Sayan/Documents/.virtualenvs/r-reticulate", required = TRUE)
py_module_available("ee")
py_config()
py_config()
py_list_packages()
ee <- import("ee")
py_run_string("
import sys
print(sys.path)
import ee
print(ee.__version__)
")
import ee
ee <- import("earthengine_api")
import earthengine_api
# Define your polygon coordinates (e.g., a point in New Delhi, India)
coords <- data.frame(
lon = 77.1025,
lat = 28.6139
)
# Convert to an sf object
point_sf <- st_as_sf(coords, coords = c("lon", "lat"), crs = 4326)
# Create a Google Earth Engine geometry from the sf object
point_geom <- ee$Geometry$Point(coords$lon, coords$lat)
# Define Landsat 8 collection and filter by date and location
landsat_collection <- ee$ImageCollection("LANDSAT/LC08/C01/T1_TOA") %>%
ee$ImageCollection$filterBounds(point_geom) %>%
ee$ImageCollection$sort("system:time_start") %>%
ee$ImageCollection$first()
use_python("C:/Users/Sayan/Documents/.virtualenvs/r-reticulate/Scripts/python.exe", required = TRUE)
ee_Initialize()
use_python("C:/Users/Sayan/Documents/.virtualenvs/r-reticulate/Scripts/python.exe", required = TRUE)
ee_install_upgrade()
ee_Initialize()
use_python("C:/Users/Sayan/Documents/.virtualenvs/r-reticulate/Scripts/python.exe", required = TRUE)
ee_Initialize()
ee_install_set_pyenv("C:/Users/Sayan/Documents/.virtualenvs/r-reticulate/Scripts/python.exe")
# Define Landsat 8 collection and filter by date and location
landsat_collection <- ee$ImageCollection("LANDSAT/LC08/C01/T1_TOA") %>%
ee$ImageCollection$filterBounds(point_geom) %>%
ee$ImageCollection$sort("system:time_start") %>%
ee$ImageCollection$first()
# Authenticate with Google Earth Engine
ee_Initialize()
4/1AQlEd8yN40tE1KP1Vvb_NTQfYAshE_kzo4WDiIjc_1W36oeTB1XgCHJivFk
# Authenticate with Google Earth Engine
ee_Initialize()
# Define your polygon coordinates (e.g., a point in New Delhi, India)
coords <- data.frame(
lon = 77.1025,
lat = 28.6139
)
# Convert to an sf object
point_sf <- st_as_sf(coords, coords = c("lon", "lat"), crs = 4326)
# Create a Google Earth Engine geometry from the sf object
point_geom <- ee$Geometry$Point(coords$lon, coords$lat)
# Create a Google Earth Engine geometry from the sf object
point_geom <- ee$Geometry$Point(coords$lon, coords$lat)
# Authenticate with Google Earth Engine
ee_Initialize()
ee_clean_user_credentials()
ee_check_init()
ee_Authenticate()
reticulate::py_run_string("import ee; print(ee.__version__)")
reticulate::py_last_error()
rgee::ee_clean_user_credentials()
rgee::ee_Authenticate()
# Authenticate with Google Earth Engine
ee_Initialize()
4/1AQlEd8wki14-h4AsPnN7jbuvrvhEHjv2rETHfSwKKwi4htz6c25SmtKpDmY
