# Define image dimensions
img_width <- 150
img_height <- 150
input_shape <- c(img_width, img_height, 3)
# Set paths to the directories
train_dir <- "TRAINING"
test_dir <- "TEST"
# Flow images from the training directory (without rescaling)
train_generator <- flow_images_from_directory(
train_dir,
target_size = c(img_width, img_height),
batch_size = 32,
class_mode = "binary"  # Binary classification (YES_SANDMINING, NO_SANDMINING)
)
setwd("C:/Users/Sayan/Desktop/SANDMINING/IMAGE_CLASS_R/")
library(keras)
library(tensorflow)
# Define image dimensions
img_width <- 150
img_height <- 150
input_shape <- c(img_width, img_height, 3)
# Set paths to the directories
train_dir <- "TRAINING"
test_dir <- "TEST"
# Flow images from the training directory (without rescaling)
train_generator <- flow_images_from_directory(
train_dir,
target_size = c(img_width, img_height),
batch_size = 32,
class_mode = "binary"  # Binary classification (YES_SANDMINING, NO_SANDMINING)
)
install.packages(c("imager", "xgboost", "randomForest", "caret"))
library(imager)
library(xgboost)
library(randomForest)
library(caret)
# Function to load and preprocess images
preprocess_image <- function(image_path, size = 64) {
img <- load.image(image_path)
img_resized <- resize(img, size, size)
as.numeric(img_resized)
}
# Function to load images from a directory
load_images_from_directory <- function(directory, size = 64) {
files <- list.files(directory, full.names = TRUE, recursive = TRUE)
labels <- gsub(".*/(YES_SANDMINING|NO_SANDMINING)/.*", "\\1", files)
data <- lapply(files, preprocess_image, size = size)
matrix(unlist(data), nrow = length(data), byrow = TRUE)
}
# Load training and test images
train_dir <- "TRAINING"
test_dir <- "TEST"
X_train <- load_images_from_directory(train_dir, size = 64)
X_test <- load_images_from_directory(test_dir, size = 64)
# Create labels
y_train <- ifelse(grepl("YES_SANDMINING", list.files(train_dir, full.names = TRUE, recursive = TRUE)), 1, 0)
y_test <- ifelse(grepl("YES_SANDMINING", list.files(test_dir, full.names = TRUE, recursive = TRUE)), 1, 0)
# Train Random Forest model
rf_model <- randomForest(X_train, as.factor(y_train), ntree = 100)
# Predict on test set
predictions <- predict(rf_model, X_test)
# Evaluate model performance
confusionMatrix(predictions, as.factor(y_test))
# Define parameters
n <- 1000
p <- 0.01
lambda <- n * p  # For Poisson approximation
# 1. Using Normal approximation, P(X < 20)
mean <- n * p
sd <- sqrt(n * p * (1 - p))
p_x_less_20_normal <- pnorm(20, mean = mean, sd = sd)
print(paste("Normal approximation P(X < 20):", round(p_x_less_20_normal, 6)))
# 2. Using Poisson approximation, P(X < 15)
p_x_less_15_poisson <- ppois(14, lambda = lambda)
print(paste("Poisson approximation P(X < 15):", round(p_x_less_15_poisson, 6)))
# 2. Using Poisson approximation, P(X < 15)
p_x_less_15_poisson <- ppois(14.99999999999999999999, lambda = lambda)
print(paste("Poisson approximation P(X < 15):", round(p_x_less_15_poisson, 6)))
p_x_less_20_normal <- pnorm(20, mean = mean, sd = sd)
print(paste("Normal approximation P(X < 20):", round(p_x_less_20_normal, 6)))
# 3. Using Normal approximation, P(X ≤ 20)
p_x_less_equal_20_normal <- pnorm(19.99999999999999999999999999999999, mean = mean, sd = sd)  # Use continuity correction
print(paste("Normal approximation P(X ≤ 20):", round(p_x_less_equal_20_normal, 6)))
help(pnorm)
# 3. Using Normal approximation, P(X ≤ 20)
p_x_less_equal_20_normal <- pnorm(19.99999999999999999999999999999999, mean = mean, sd = sd)  # Use continuity correction
print(paste("Normal approximation P(X ≤ 20):", round(p_x_less_equal_20_normal, 6)))
# 3. Using Normal approximation, P(X ≤ 20)
p_x_less_equal_20_normal <- pnorm(19.9999, mean = mean, sd = sd)  # Use continuity correction
print(paste("Normal approximation P(X ≤ 20):", round(p_x_less_equal_20_normal, 6)))
# 3. Using Normal approximation, P(X ≤ 20)
p_x_less_equal_20_normal <- pnorm(19, mean = mean, sd = sd)  # Use continuity correction
print(paste("Normal approximation P(X ≤ 20):", round(p_x_less_equal_20_normal, 6)))
# 3. Using Normal approximation, P(X ≤ 20)
p_x_less_equal_20_normal <- pnorm(19.9, mean = mean, sd = sd)  # Use continuity correction
print(paste("Normal approximation P(X ≤ 20):", round(p_x_less_equal_20_normal, 6)))
# 3. Using Normal approximation, P(X ≤ 20)
p_x_less_equal_20_normal <- pnorm(19.5, mean = mean, sd = sd)  # Use continuity correction
print(paste("Normal approximation P(X ≤ 20):", round(p_x_less_equal_20_normal, 6)))
# 4. Using Poisson approximation, P(X > 20)
p_x_greater_20_poisson <- 1 - ppois(20, lambda = lambda)
print(paste("Poisson approximation P(X > 20):", round(p_x_greater_20_poisson, 6)))
help(ppois)
# 4. Using Poisson approximation, P(X > 20)
p_x_greater_20_poisson <- ppois(20, lambda = lambda.lower.tail = FALSE)
print(paste("Poisson approximation P(X > 20):", round(p_x_greater_20_poisson, 6)))
# 5. P(X ≤ 10) using Poisson and Normal approximations
p_x_less_equal_10_poisson <- ppois(10, lambda = lambda)
p_x_less_equal_10_normal <- pnorm(10, mean = mean, sd = sd)  # Use continuity correction
print(paste("Poisson approximation P(X ≤ 10):", round(p_x_less_equal_10_poisson, 6)))
print(paste("Normal approximation P(X ≤ 10):", round(p_x_less_equal_10_normal, 6)))
# Checking which approximation is better for P(X ≤ 10)
if (abs(p_x_less_equal_10_poisson - p_x_less_equal_10_normal) < 0.01) {
print("Poisson and Normal approximations for P(X ≤ 10) are close.")
} else {
print("Poisson approximation is better for P(X ≤ 10).")
}
# 2. Using Poisson approximation, P(X < 15)
p_x_less_15_poisson <- ppois(14.99999999999999999999, lambda = lambda)
print(paste("Poisson approximation P(X < 15):", round(p_x_less_15_poisson, 6)))
p_x_less_20_normal <- pnorm(20, mean = mean, sd = sd)
print(paste("Normal approximation P(X < 20):", round(p_x_less_20_normal, 6)))
# 3. Using Normal approximation, P(X ≤ 20)
p_x_less_equal_20_normal <- pnorm(19.5, mean = mean, sd = sd)  # Use continuity correction
print(paste("Normal approximation P(X ≤ 20):", round(p_x_less_equal_20_normal, 6)))
# 3. Using Normal approximation, P(X ≤ 20)
p_x_less_equal_20_normal <- pnorm(19.6, mean = mean, sd = sd)  # Use continuity correction
print(paste("Normal approximation P(X ≤ 20):", round(p_x_less_equal_20_normal, 6)))
# 3. Using Normal approximation, P(X ≤ 20)
p_x_less_equal_20_normal <- pnorm(19.4, mean = mean, sd = sd)  # Use continuity correction
print(paste("Normal approximation P(X ≤ 20):", round(p_x_less_equal_20_normal, 6)))
# 3. Using Normal approximation, P(X ≤ 20)
p_x_less_equal_20_normal <- pnorm(19.3, mean = mean, sd = sd)  # Use continuity correction
print(paste("Normal approximation P(X ≤ 20):", round(p_x_less_equal_20_normal, 6)))
# 3. Using Normal approximation, P(X ≤ 20)
p_x_less_equal_20_normal <- pnorm(19.45, mean = mean, sd = sd)  # Use continuity correction
print(paste("Normal approximation P(X ≤ 20):", round(p_x_less_equal_20_normal, 6)))
# 3. Using Normal approximation, P(X ≤ 20)
p_x_less_equal_20_normal <- pnorm(19.9999999999999, mean = mean, sd = sd)  # Use continuity correction
print(paste("Normal approximation P(X ≤ 20):", round(p_x_less_equal_20_normal, 6)))
# Define parameters
n <- 1000
p <- 0.1
lambda <- n * p  # For Poisson approximation
# 1. Using Normal approximation, P(X < 20)
mean <- n * p
sd <- sqrt(n * p * (1 - p))
# 5. P(X ≤ 10) using Poisson and Normal approximations
p_x_less_equal_10_poisson <- ppois(110, lambda = lambda)
p_x_less_equal_10_normal <- pnorm(110, mean = mean, sd = sd)  # Use continuity correction
print(paste("Poisson approximation P(X ≤ 10):", round(p_x_less_equal_10_poisson, 6)))
print(paste("Normal approximation P(X ≤ 10):", round(p_x_less_equal_10_normal, 6)))
# 5. P(X ≤ 10) using Poisson and Normal approximations
p_x_less_equal_10_poisson <- ppois(10, lambda = lambda)
p_x_less_equal_10_normal <- pnorm(10, mean = mean, sd = sd)  # Use continuity correction
print(paste("Poisson approximation P(X ≤ 10):", round(p_x_less_equal_10_poisson, 6)))
print(paste("Normal approximation P(X ≤ 10):", round(p_x_less_equal_10_normal, 6)))
# 5. P(X ≤ 10) using Poisson and Normal approximations
p_x_less_equal_10_poisson <- ppois(100, lambda = lambda)
p_x_less_equal_10_normal <- pnorm(100, mean = mean, sd = sd)  # Use continuity correction
print(paste("Poisson approximation P(X ≤ 10):", round(p_x_less_equal_10_poisson, 6)))
print(paste("Normal approximation P(X ≤ 10):", round(p_x_less_equal_10_normal, 6)))
# 5. P(X ≤ 10) using Poisson and Normal approximations
p_x_less_equal_10_poisson <- ppois(90, lambda = lambda)
p_x_less_equal_10_normal <- pnorm(90, mean = mean, sd = sd)  # Use continuity correction
print(paste("Poisson approximation P(X ≤ 10):", round(p_x_less_equal_10_poisson, 6)))
print(paste("Normal approximation P(X ≤ 10):", round(p_x_less_equal_10_normal, 6)))
# 5. P(X ≤ 10) using Poisson and Normal approximations
p_x_less_equal_10_poisson <- ppois(10, lambda = lambda)
p_x_less_equal_10_normal <- pnorm(10, mean = mean, sd = sd)  # Use continuity correction
print(paste("Poisson approximation P(X ≤ 10):", round(p_x_less_equal_10_poisson, 6)))
print(paste("Normal approximation P(X ≤ 10):", round(p_x_less_equal_10_normal, 6)))
mean
sd
1%%2
3%%2
5%%2
2%%2
